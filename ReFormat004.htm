<!DOCTYPE html>
<html> <title>ReFormatter</title> <body bgcolor="#CCCCFF"> <font face="sans-serif">
<noscript><h1><font color="red">This program won't work with JavaScript disabled!</font></h1></noscript>
<h1>Let's check 24 hr coverage and prepare a simplified schedule!</h1><h3><A HREF="javascript:history.go(0)">(Page reload is required for recheck!)</A></h3><hr>

<h2>Paste <i>Report</i> <u>Schedules (Future)</u> in the box below:</h2>
<textarea id="inputTextarea" cols=70 rows=5 placeholder="Ctrl-A and Ctrl-C in CC report and Ctrl-P here."></textarea>
<button type="button" onclick="reFormat()">Check it &amp; reformat!</button>
<button type="button" onclick="download()">I've checked &amp; want to download the file.</button>
<hr>
<p id="output">
<hr><h3>How to use:</h3>
In CC, click on the <b>Reports</b> tab (not any submenu below), select <b>Schedules(Future)</b> as the report type. Select the <b><u>wider</u></b> range  (very important, don't just select the range to be checked. For example, if you want to check/reformat 1/13~1/27, please select the entire January, and manually check the shift on 1/1 and 1/31) and <b>check a single client's name</b> then click "Show Report".<br><br>

<u><b><i>Caution: The first and the last shifts may not be shown or checked correctly, therefore, please select wider report range to ensure correct gap indicators!</i></b></u><br><br>

Once the CC report shown, select all and copy all (Ctrl-A and Ctrl-C will do).  Come back to this tab and paste everything(Ctrl-P) in the text box above (box size doesn't matter), then click the "Check it &amp; reformat" button, after 5 seconds it will reformat all shifts in the range you select.<br><br>

The checked result will be shown here with gap indicators.  Please make sure you check the entire month by scrolling the window if necessary.  If you need to adjust shifts and come back for rechecking, please refresh the page first. By default this program checks for all coverage gaps, but it <b>won't</b> check for short or overlapped shifts.  It's designed only for 24 hr care needed clients, not for less-than-24hr-care clients.<br><br>

You can click the "I've checked &amp; want to download the file" button to download the formated schedule for further editing in Word.  Unless otherwise directed, you can delete extra shifts in Word, <u>please send the client no more than biweekly schedule</u> because of unpredictable CGs future actions and changes. It's better to send the edited schedule in PDF format instead of Word format to avoid layout changes.
</p>
<hr><p id="version"></p>
<script>
var progVer = document.URL.split('/').slice(-1)[0];
document.getElementById("version").innerHTML = "Author: Jack@HISC-291, Program information: "+progVer;
// copy from ShortShifts003.htm
function read_shift(single_line){
  shift_date=single_line.split(',')[0].split(' ')[0].substring(0,10);
       shift=single_line.split(',')[1];
          cg=shift.split(':')[0].substring(1);
 shift_start=shift.split('-')[0].split(':');
 if ( /(\d{2})\/(\d{2})\/(\d{4})/.test(shift) ){
  startTime = Date.parse(shift_start[1]+":"+shift_start[2])/1000;
  endTime   = Date.parse(shift.split('-')[1].substring(1).split('M')[0]+"M")/1000;
 }else{
  startTime = Date.parse(shift_date+shift_start[1]+":"+shift_start[2])/1000;
  endTime   = Date.parse(shift_date+shift.split('-')[1].split('M')[0]+"M")/1000;
 }
 return [shift_date, cg, startTime, endTime];
}

// http://jsperf.com/difference-between-two-arrays-with-native-javascript-or
function arraySubtr(a,b){
  var ans = [];
  a.forEach(function(ele){ if (b.indexOf(ele)<0)  ans.push(ele); } );
  return ans;
}

// http://stackoverflow.com/questions/8069315/create-array-of-all-integers-between-two-numbers-inclusive-in-javascript-jquer
function arrayRange(lowEnd, highEnd){
  var arr = [],  c = highEnd - lowEnd + 1;
  while ( c-- ) {  arr[c] = highEnd-- }
  return arr;
}

// http://stackoverflow.com/questions/8888491/how-do-you-display-javascript-datetime-in-12-hour-am-pm-format
function hr12(date){
  var formated=date.toLocaleTimeString('en-US',{hour12:true}).replace(/([\d]+:[\d]{2})(:[\d]{2})(.*)/, "$1$3");
  return formated.split(' ').join('');
}

function dayWeek4(date){
  var formated = date.toString().split(' ')[0] + ".";
  formated += ("0" + (date.getMonth() + 1)).slice(-2);
  return formated + "/"+("0" + date.getDate()).slice(-2);
}

function fileN(){
  var formated = ("0" + (new Date).getMonth() + 1).slice(-2);
  formated += ("0" + (new Date).getDate()).slice(-2);
  return  formated + (new Date).getFullYear();
}
//http://stackoverflow.com/questions/3665115/create-a-file-in-memory-for-user-to-download-not-through-server
var download=function() {
  var pom = document.createElement('a');
  pom.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(reFormat()));
  pom.setAttribute('download', fileN()+fileExt);
  pom.click();
}
var fileContent="{\\rtf1\\ansi\\deff0 {\\fonttbl {\\f0 Times New Roman;} } \\margl800 \\margr800 \\cols2 \\f0\\fs28\\b ";
var fileExt=".rtf";
var t9 = '<tr></tr><tr></tr><tr></tr><tr></tr><tr></tr><tr></tr><tr></tr><tr></tr>';
var output = "";
var monthNames = [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ];
var today = '';
var header=true;
var shifts ='1234567890'; //some text is required to initiate in JS line 79?;
var rangestart = new Date; // for getting range to limit output
var s = new Date; // for getting range to limit output
var e = new Date; // for getting range to limit output
var y = new Date; // for getting range to limit output
var yesterday = '07/31/2014'; // initial date globally required
var client_names = [];
var main_start = Date.parse( yesterday + " 12:00 AM")/60000; //get initial date in minutes /1000 /60
var residual=[]; // create for last shift array
var aday=arrayRange(main_start,main_start+1439); //create a whole day array in minutes
// var date=new Date; // for temparary use on line 74
function reFormat() {
  //output += aday;
  var input = document.getElementById("inputTextarea").value;
  input = input.split(/\r?\n/);
// Start parsing lines containing shifts
  for (var i in input){   // R32: itirate each line
    if ( /^Address:/.test(input[i]) ) client_names.push(shifts); //R33: ^address can get us the client name in the last line.

    if(/^(\d{2})\/(\d{2})\/(\d{4})/.test(shifts)){
    yesterday = shifts.substring(0,10);}

    today = input[i].substring(0,10);  //R34: #cannot add /^Address:/
    shifts = input[i].trim(); // R35: Important! make the current line as the loaded line.
    if ( /^Date Range:/.test(input[i]) ) { rangestart.setTime(Date.parse(shifts.substring(12,22)+" 12:00 AM")); }// R36:getting report starting date.
    if (/^(\d{2})\/(\d{2})\/(\d{4})/.test(yesterday)){y.setTime(Date.parse( yesterday + " 12:00 AM"));}; // get the yesterday as the Time object, not in Ruby version
    if ( client_names.length>0 && /^(\d{2})\/(\d{2})\/(\d{4})/.test(shifts)  ) { // R37: shift lines always begin with ^dates.
      var shift_date = read_shift(shifts)[0], cg = read_shift(shifts)[1], startTime = read_shift(shifts)[2], endTime = read_shift(shifts)[3] // R38:parsing current shift time
      s.setTime(startTime*1000);
      e.setTime(endTime*1000);
      if ( header ){
        output += "<h3>"+ monthNames[rangestart.getMonth()] + " schedule for "+ client_names +"</h3> (prepared on "+(new Date).toString().substring(4,15)+")<table>";
        fileContent += monthNames[rangestart.getMonth()] + " schedule for "+ client_names +"\\line (prepared on "+(new Date).toString().substring(4,15)+")\\line ";
      } // R39: single client schedule header
      //output += "@119: residual length:"+residual.length+" Aday length:"+aday.length+" clientsLength:"+client_names.length+" shift start:"+dayWeek4(s)+" today:"+today+" yesterday:"+yesterday+" rangestart:"+dayWeek4(rangestart)+" shift:"+shifts+"<br><br>";

      if (yesterday != today && residual.length>0 && /^(\d{2})\/(\d{2})\/(\d{4})/.test(yesterday)){ //R41: if it's a different day from the last line.
        // if (aday.length>1 && rangestart < s && y >= rangestart ){ output += '<tr><td colspan="2"><b>Warning: please recheck 24hr coverage above...........................</b></td></tr>'; } // R42:check 24h coverage L122{&& residual.length>0}

      if (aday.length>1 && rangestart < s ){ output += '<tr><td colspan="2"><b>Warning: please recheck 24hr coverage above...........................</b></td></tr>'; } // Temporay test 01262015
        output += t9+'<tr><td align="right">'+dayWeek4(s)+"</td><td>"+hr12(s)+ "-" + hr12(e)+"  "+cg +"</td></tr>"; //#R44
        fileContent += "\\line "+dayWeek4(s)+"\\tab "+hr12(s)+ "-" + hr12(e)+"  "+cg +"\\line ";
        main_start=Date.parse( today + " 12:00 AM")/60000; //R45:For re-creating a new whole day array
        aday=arrayRange(main_start, main_start+1439); //R46# - residual
      }else{
        if ( /^(\d{2})\/(\d{2})\/(\d{4})/.test(yesterday) && rangestart < s ) {
        output += "<tr><td></td><td>"+hr12(s)+ "-" + hr12(e)+"  "+cg +"</td></tr>";
        fileContent += "\\tab \\tab "+hr12(s)+ "-" + hr12(e)+"  "+cg +"\\line ";
        } //#R52, also added rangestart < s on 01262015
      } // R41~57 if..else..end ends here:
      aday = arraySubtr(aday, residual);  // #take away the last shift array from the whole day array
      residual=arrayRange(startTime/60, endTime/60); // #replace the last shift array by the current shift
      aday = arraySubtr(aday, residual); //  #take away current shift time from whole day array
      header = false;
    if (rangestart > s){ aday = [] }; // suppressing 24hr check before range
    }else{
      if (aday.length > 1 && /^Total Hours/.test(input[i])) output += '<tr><td colspan="2"><br>Warning: please recheck 24hr coverage above...........................</br></td></tr>'; // R61: last shift catcher
    } //ending R69
  } //ending R63
  document.getElementById("output").innerHTML = output;
  fileContent += "}";
  return fileContent;
}  // ending reFormat();
</script>
</body>
</html>